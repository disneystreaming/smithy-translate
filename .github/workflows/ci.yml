name: Continuous Integration

on:
  pull_request:
    branches: ["*"]
  push:
    branches: ["main"]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      publishSnapshot:
        description: "Publish Snapshot"
        required: false
        default: "false"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
            distribution: adopt
            java-version: 21

      - name: Check formatting
        run: ./mill -k --disable-ticker __.checkFormat

      - name: Check headers
        run: ./mill -k --disable-ticker __.headerCheck

      - name: Compile
        run: ./mill -k --disable-ticker __.compile

      - name: Run tests
        run: |
          ./mill -k --disable-ticker __.test
          ./mill -k --disable-ticker cli.run openapi-to-smithy --input modules/openapi/fullTests/testInputs modules/openapi/fullTests/testOutputs
          ./mill -k --disable-ticker cli.run json-schema-to-smithy --input modules/json-schema/fullTests/testInputs modules/json-schema/fullTests/testOutputs
          ./mill -k --disable-ticker proto-examples.compileScalaPB # trigger smithy-to-proto run

      - name: Run MiMa checks
        run: |
          ./mill -k --disable-ticker __.mimaReportBinaryIssues

      - name: Validate README.md
        run: ./mill -k --disable-ticker readme-validator.validate

      - name: Check for untracked changes
        run: |
          git status
          ./scripts/check-dirty.sh

      - name: Publish ${{ github.ref }}
        if: startsWith(github.ref, 'refs/tags/v') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publishSnapshot == 'true')
        run: |
              ./mill -i \
              mill.contrib.sonatypecentral.SonatypeCentralPublishModule/publishAll \
              --username $SONATYPE_USERNAME \
              --password $SONATYPE_PASSWORD \
              --gpgArgs --no-tty,--pinentry-mode,loopback,--batch,--yes,-a,-b \
              --publishArtifacts __.publishArtifacts \
              --readTimeout  36000 \
              --awaitTimeout 36000 \
              --connectTimeout 36000 \
              --shouldRelease true
        env:
          MILL_PGP_SECRET_BASE64: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.CENTRAL_SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.CENTRAL_SONATYPE_USERNAME }}
